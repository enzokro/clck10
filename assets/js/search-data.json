{
  
    
        "post0": {
            "title": "How to normalize spectrograms",
            "content": "Introduction . Audio is naturally a 1D signal Can transformed into 2D in several ways Most common is via short-time Fourier Transform (STFT) The STFT turns audio into a spectrogram: 2D representation in time and frequency Since now 2D, can think of as an image Means we can leverage all the great work from deep learning image classification . Hard to overstate success of deep neural network for image classification. Previously challenging task dominated by handcrafted features Now features automatically learned from labeled data Possible due to improvements in datasets, algorithms, and compute . But, one tricky issue using spectrogram inputs Data must be properly normalized when training neural network Else learning is difficult for the networks and could take a very long time or even diverge. A spectrogram, however, is fundamentally different from natural images. So how can we properly normalize spectrograms? . Background on initializations . well known how to scale images: stores as 0 to 255 range. Then converted to range 0 to 1 Find the statistics that approximately center the data and give it unit variance Spectrograms are created at a completely different range Usually analyzed in the log domain where the possible range is -inf to +inf. In practice the values more constrained, but range is much larger than images (and negative). . Several details in how to normalize audio pop up. How to normalize the waveform? How to normalize the spectrogram? How do we compute the normalization statistics? How to deal with rapidly changing audio? . Will start with normalizing waveforms then move to spectrograms. . Sample audio dataset . To make things practical, will apply normalization techniques to ongoing ESC-50 challenge hosted by fastai audio fastaudio library. Challenge uses the ESC-50 dataset for sound classification ESC-50 has a wide range of sounds, will give us a good feel for how varied spectrograms can be . The fastaudio library is rapidly changing and improving so instructions might be different, but will aim to keep post updated. Many lines below are based on the baseline results notebook for convenience. . Importing fastai and fastaudio modules . from fastai.vision.all import * from fastaudio.core.all import * from fastaudio.augment.all import * . Downloading the ESC-50 dataset . # already included in fastaudio, can download with fastai&#39;s `untar_data` path = untar_data(URLs.ESC50) . The ESC-50 data is inside of an audio folder. Can look inside to find many .wav files. . wavs = (path/&quot;audio&quot;).ls() wavs . We use the first waveform as an example for normalization. Can load an audio file using the create function of the AudioTensor class in fastaudio. This class wraps a torch.Tensor with added syntactic sugar. . # create an AudioTensor from a file path sample = AudioTensor.create(wavs[0]) . Thanks to functionality in the AudioTensor class we can easily plot and even listen to our sample! . sample.show() . sample.hear() . Let&#39;s start by normalizing this waveform. . Normalizing waveforms . The first step is normalizing the audio waveform. We give it a mean of zero and unit variance as in the usual way: . $$ text{norm_audio} = frac{ text{audio} - mean( text{audio})}{std( text{audio})} $$ . # normalize the waveform norm_sample = (sample - sample.mean()) / sample.std() . Let&#39;s check if the mean is roughly 0 and the variance is roughly one . # checking if normalization worked norm_sample.mean(),norm_sample.var() . Success! Let&#39;s wrap it back an AudioTensor for convenience. The sampling rate did not change so we pass in the sampling rate from the unnormalized waveform. . norm_sample = AudioTensor(norm_saple, sr=sample.sr) . Now that we normalized the audio we can convert it to a spectrogram. . Extracting spectrograms from audio . We can now extract a spectrogram from the normalized audio. The fastaudio library has a helpful way of converting AudioTensors into Spectrograms by wrapping some parts of torchaudio. . # create a fastai Transform that converts audio into spectrograms cfg = AudioConfig.BasicSpectrogram() audio2spec = AudioToSpec.from_cfg(cfg) . The details of the spectrogram are not directly relevant here. But you can take a look at the spectrogram source code to see it basically does pre and post processing around a torch.stft call. We can now transform our audio into a spectrogram and show it. . # extract and view our spectrogram spec = audio2spec(norm_sample) spec . This is a good time to compare the shapes of the audio vs. spectrogram to see how it went from one to two dimensions. . f&#39;Audio shape: {norm_sample.shape} | Spectrogram shape: {spec.shape}&#39; . How do we normalize spectrograms? . As stated in the introduction, a spectrogram is fundamentally different from an image. . In an image, both dimensions are in the spatial domain and have the same units. For a color image, we have three channels (RGB) and we normalize each one. If the image has a single channel (grayscale) then we normalize it instead. Given that both dimensions are in the same scale and domain same, and the general layout of natural images, it makes sense to normalize each channel with a single, global value. . In a spectrogram, one dimension represents time and the other represents frequency. Different quantities, scales, and sizes. Frequency dimension given by choice of FFT size. Sets our spectral resolution. Time dimension given by length of our signal, FFT size, and window overlap. Sets our temporal resolution. . However, the spectrogram also introduces the notion of a different type of channel. This makes &quot;channel&quot; an overloaded term for our purposes but it is still a crucial piece of the puzzle. The spectrogram transform can be interpreted as a &quot;channelizer&quot;. That is a fancy way to say that it takes the continuous frequency spectrum of our signal and chops it up into discrete bins, or channels. For example, consider a signal sampled at 16 kHz (typical for audio) where we take an STFT of size 512. Our spectrogram will have 512 channels where each one has a &quot;bandwidth&quot; of $$16 text{kHz} / 512 text{bins} = 31.25 text{Hz per bin}$$ . Even though these spectrum channels are different from the channels in an image, it raises the question: should we (or can we?) normalize an entire spectrum &quot;image&quot; with a single, global value? Or do we need to normalize each channel, as is done with images? . There is no clear answer here, and your approach will likely depend both on the specifics of your problem and where your system will be deployed. For example, if your are building a system that will be deployed in a similar environment as the training one, then it might make more sense to normalize by channels. Your channel-based normalization statistics will follow the average noise floor and activity of the training data. This motivation hold if you expect roughly the same patterns and distributions of activity once the system is deployed. However, it will be critical to monitor the deployed environment and update the statistics as needed, else you slowly shift out of domain. . If your system will instead be used in a completely different environment, of which you have no knowledge, then the global statistics could be a better fit. While not as technically sound, your model won&#39;t be as surprised by radically new activity across different channels. . Lastly, we also have issue of Transfer Learning. In Transfer Learning it is best-practice to normalize the new dataset with the statistics from the old dataset. In most cases that means normalizing with ImageNet statistics. So if you are doing transfer learning, the easiest approach will be to use original stats. If your dataset is large enough that you are training from scratch, then the above applies. . Global Spectrogram Normalization . We will start by using a single, global value to normalize the spectrograms This is the same way images are normalized Will treat spectrogram as single-channel image Need to find a single mean and standard deviation to apply to to each image . Get it from training dataset. This means stepping through our mini-batches and finding the mean and standard deviation for each batch. Then, accumulate and average it over our training samples to get a &quot;global&quot; statistic. First, we need a way to accumulate these statistics over mini-batches. Will borrow from the very helpful guide here . One small detail: if your training dataset is large enough, you do not need to iterate through the entire thing. It is often enough to sample only 10 to 20% of the samples for accurate statistics. Since ESC-50 is small enough, we get statistics from the whole set. . The class below tracks our global mean and standard deviation across mini-batches. . class StatsRecorder: def __init__(self, red_dims=(0,2,3)): &quot;&quot;&quot;Accumulates normalization statistics across mini-batches. ref: http://notmatthancock.github.io/2017/03/23/simple-batch-stat-updates.html &quot;&quot;&quot; self.red_dims = red_dims # which mini-batch dimensions to average over self.nobservations = 0 # running number of seen observations def update(self, data): &quot;&quot;&quot; data: ndarray, shape (nobservations, ndimensions) &quot;&quot;&quot; # initialize stats and dimensions on first batch if self.nobservations == 0: self.mean = data.mean(dim=self.red_dims, keepdim=True) self.std = data.std (dim=self.red_dims,keepdim=True) self.nobservations = data.shape[0] self.ndimensions = data.shape[1] else: if data.shape[1] != self.ndimensions: raise ValueError(&#39;Data dims don&#39;t match prev observations.&#39;) # find mean of new mini batch newmean = data.mean(dim=self.red_dims, keepdim=True) newstd = data.std(dim=self.red_dims, keepdim=True) # update number of observations m = self.nobservations * 1.0 n = data.shape[0] # update running statistics tmp = self.mean self.mean = m/(m+n)*tmp + n/(m+n)*newmean self.std = m/(m+n)*self.std**2 + n/(m+n)*newstd**2 + m*n/(m+n)**2 * (tmp - newmean)**2 self.std = torch.sqrt(self.std) # update total number of seen samples self.nobservations += n . By default, it will average the statistics over grayscale or RGB dimensions for images. The red_dims might look familiar from other Computer Vision normalization code. Later on we will normalize by spectrogram channels by passing a different `red_dims`. . Get normalization stats from training dataset . Now we have to iterate through our training dataset and find the global statistics. Setup follows the fastaudio ESC-50 baseline. . df = pd.read_csv(path/&quot;meta&quot;/&quot;esc50.csv&quot;) df.head() def CrossValidationSplitter(col=&#39;fold&#39;, fold=1): &quot;Split `items` (supposed to be a dataframe) by fold in `col`&quot; def _inner(o): assert isinstance(o, pd.DataFrame), &quot;ColSplitter only works when your items are a pandas DataFrame&quot; col_values = o.iloc[:,col] if isinstance(col, int) else o[col] valid_idx = (col_values == fold).values.astype(&#39;bool&#39;) return IndexSplitter(mask2idxs(valid_idx))(o) return _inner auds = DataBlock(blocks=(AudioBlock, CategoryBlock), get_x=ColReader(&quot;filename&quot;, pref=path/&quot;audio&quot;), splitter=CrossValidationSplitter(fold=1), batch_tfms = [a2s], get_y=ColReader(&quot;category&quot;)) dbunch = auds.dataloaders(df, bs=64) dbunch.show_batch() . Next we create our recorder and find the needed normalization statistics. . global_stats = StatsRecorder() for idx,o in enumerate(iter(dbunch.train)): x,y = o global_stats.update(x) global_mean,global_std = global_stats.mean,global_stats.std . Can check they are the same shape as typical grayscale normalization stats. With a single channel, we expect shape: [1,1,1,1]. . mean,mean.shape . std,std.shape . First, let&#39;s repeat this with new red_dims argument to find normalization stats for each spectrogram channel. The new red_dims tells the recorder to average over everything except the frequency axis. . channel_stats = StatsRecorder(red_dims=(0,1,3)) for idx,o in enumerate(iter(dbunch.train)): x,y = o channel_stats.update(x) channel_mean,channel_std = channel_stats.mean,channel_stats.std . Making Normalization transforms . First need a transform to normalize the audio as shown in the first section . class AudioNormalize(Transform): &quot;Normalizes a single audio tensor.&quot; def encodes(self, x:AudioTensor): return (x-x.mean()) / x.std() . To normalize our spectrogram batches, we can reuse fastai&#39;s existing Normalize with different arguments . GlobalSpecNorm = Normalize(global_mean, global_std, axes=(0,2,3)) ChannelSpecNorm = Normalize(channel_mean, channel_std, axes=(0,1,3)) . Training with different statistics . Follow the fastaudio baseline, and train each type of normalization for 10 epochs. Take averaged accuracy over five runs. . epochs = 10 num_runs = 5 . Performance with global statistics . auds = DataBlock(blocks=(AudioBlock, CategoryBlock), get_x=ColReader(&quot;filename&quot;, pref=path/&quot;audio&quot;), splitter=CrossValidationSplitter(fold=1), item_tfms = [AudioNormalize], batch_tfms = [a2s, GlobalSpecNorm], get_y=ColReader(&quot;category&quot;)) dbunch = auds.dataloaders(df, bs=64) accuracies = [] for i in range(num_runs): # make cnn learner learn = cnn_learner(dbunch, resnet18, config=cnn_config(n_in=1), loss_fn=CrossEntropyLossFlat, metrics=[accuracy]) # fit one cycle for given epochs learn.fit_one_cycle(epochs) accuracies.append(learn.recorder.values[-1][-1]) print(sum(accuracies) / num_runs) print(f&#39;Average accuracy for &quot;global&quot; normalization: {sum(accuracies) / num_runs}&#39;) . Performance with channel statistics . auds = DataBlock(blocks=(AudioBlock, CategoryBlock), get_x=ColReader(&quot;filename&quot;, pref=path/&quot;audio&quot;), splitter=CrossValidationSplitter(fold=1), item_tfms = [AudioNormalize], batch_tfms = [a2s, ChannelSpecNorm], get_y=ColReader(&quot;category&quot;)) dbunch = auds.dataloaders(df, bs=64) accuracies = [] for i in range(num_runs): # make cnn learner learn = cnn_learner(dbunch, resnet18, config=cnn_config(n_in=1), loss_fn=CrossEntropyLossFlat, metrics=[accuracy]) # fit one cycle for given epochs learn.fit_one_cycle(epochs) accuracies.append(learn.recorder.values[-1][-1]) print(f&#39;Average accuracy for &quot;channel&quot; normalization: {sum(accuracies) / num_runs}&#39;) . Comparisons without normalization . The above was a nice exercise and more theoretically sound that no normalization. But it it actually help? Let&#39;s compare without any normalization at all. . auds = DataBlock(blocks=(AudioBlock, CategoryBlock), get_x=ColReader(&quot;filename&quot;, pref=path/&quot;audio&quot;), splitter=CrossValidationSplitter(fold=1), batch_tfms = [a2s], get_y=ColReader(&quot;category&quot;)) dbunch = auds.dataloaders(df, bs=64) accuracies = [] for i in range(num_runs): learn = cnn_learner(dbunch, resnet18, normalize=False, config=cnn_config(n_in=1), loss_fn=CrossEntropyLossFlat, metrics=[accuracy] ) learn.fit_one_cycle(epochs) accuracies.append(learn.recorder.values[-1][-1]) print(f&#39;Average accuracy without any normalization: {sum(accuracies) / num_runs}&#39;) .",
            "url": "https://enzokro.dev/normalizing_spectrums/2020/08/04/Normalizing-spectrograms-for-deep-learning.html",
            "relUrl": "/normalizing_spectrums/2020/08/04/Normalizing-spectrograms-for-deep-learning.html",
            "date": " • Aug 4, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "Rayleigh Weight Initializations",
            "content": "Overview . This is the first in a series of posts that will build complex-valued neural networks in pytorch with an eye towards Radio Frequency (RF) applications. Part one introduces complex weight initializations using two pieces of information: . Magnitude: the length of a vector | Phase: where a vector is pointing | . The magnitudes will be drawn from a Rayleigh distribution which is a natural representation for RF data. Next, we make sure the weights are good initial values for neural networks by having their variance meet certain criteria. We then put everything together by creating complex weights as pytorch tensors. To start, we give some backgroud on weight initializations and why they are important. . Background on initializations . It is crucial to train neural networks from properly initialized weights. While initializations are now taken for granted, they were one of the key pieces that made it possible to train deep networks in the first place. The main insights about good weight initializations came from analyzing the variance of weights. Specifically, in how the weight&#39;s variance affected gradients during backpropagation. It was great work by He and Glorot, Bengio that showed how the variance of the weights should meet certain criteria to keep gradients flowing smoothly. Here, &quot;smoothly&quot; means that during training the gradients neither disappear (go to 0) nor explode (grow without bound). The best known initializations are now the defaults in popular deep learning libraries such as TensorFlow and pytorch. However, complex-valued deep networks are newer and not as well established. . Complex networks . Complex-valued networks have a long history, see Chapter 3 of this thesis for a great recap. The first modern and complete take on deep complex neural nets is likely Deep Complex Networks by Trabelsi et. al. This paper explored many fundamental building blocks for deep complex networks. It developed initializations, convolutions, activations, batch normalizations, and put them together into complex Residual Networks (ResNets). Despite this fantastic work the field stayed quiet at first. But, there has been a recent spike in activity with follow ups in: medical imaging, radio frequency (RF) signal processing, physical optical networks, and even some quantum networks! Next we take the first steps in making complex weights: creating their magnitudes. . Rayleigh Distribution . To best describe a Rayleigh distribution, imagine setting up a sensor that measures wind speed out in an open field. If we analyze the wind speed passing through this sensor in two directions, say North and East, then the magnitude of the wind&#39;s velocity will be Rayleigh distributed. A Rayleigh distribution happens in general when two random variables are added. To be Rayleigh distributed, the random variables must be uncorrelated, normally distributed, zero mean, and share the same standard deviation. A more relevant example for our purposes is tuning in to a radio signal. Imagine we tune a radio to an empty spectrum region where all we hear is noise. If we record the real and imaginary components of this RF stream, then their magnitudes will be Rayleigh distributed. In other words, the magnitude of RF noise follows a Rayleigh distribution. . Let&#39;s dive into the details. The equation below is the Probability Density Function (PDF) of a Rayleigh distribution. . $$f(x, sigma) = frac{x}{ sigma^2}e^{-x^2/(2 sigma^2)}, x geq 0$$ . If this equation looks intimidating, we can instead code it up as a python function to make it much clearer: . def rayleigh_pdf(x, sigma): &quot;Finds Rayleigh PDF evaluated at `x`.&quot; p = (x / sigma**2) * np.exp(-x**2 / (2*sigma**2)) return p . In the equation and code above sigma ($ sigma$) is the scale parameter. It is common in many probability distributions and usually controls how spread out or narrow a distribution is. . Let&#39;s start by setting $ sigma = 1$ to see the &quot;basic&quot; Rayleigh shape. We will then change sigma to see how it affects the distribution. . sigma = 1 # calculate PDF on 100 equally spaced points between 0 and 5 points = np.linspace(0, 5, 100) ray_pdf = rayleigh_pdf(points, sigma) . # plot the rayleigh pdf fig,ax = plt.subplots(figsize=(8,7)) ax.plot(ray_pdf) ax.set_xticklabels([-1] + list(range(len(ax.get_xticklabels())))) ax.set_xlabel(&#39;Sample Value&#39;, fontsize=&#39;x-large&#39;) ax.set_ylabel(&#39;Probability Density&#39;, fontsize=&#39;x-large&#39;) ax.set_title(&#39;Rayleigh PDF&#39;, fontsize=&#39;xx-large&#39;); . As we mentioned the scale, $ sigma$, changes the width or narrowness of the distribution. Let&#39;s both halve and double sigma to see what happens. . # setup plot fig,ax = plt.subplots(figsize=(8,7)) ax.set_xlabel(&#39;Sample Value&#39;, fontsize=&#39;x-large&#39;) ax.set_ylabel(&#39;Probability Density&#39;, fontsize=&#39;x-large&#39;) ax.set_title(&#39;Rayleigh PDFs&#39;, fontsize=&#39;xx-large&#39;); # plot sigmas in different colors sigmas = [0.5, 1, 2] colors = [&#39;m&#39;, &#39;b&#39;, &#39;r&#39;] for color,sig in zip(colors,sigmas): rpdf = rayleigh_pdf(points, sig) ax.plot(points, rpdf, c=color, label=f&#39;σ: {sig}&#39;) ax.set_xticklabels([-1] + list(range(len(ax.get_xticklabels())))) ax.legend(); . The blue line in plot above is the same PDF from the first plot where $ sigma = 1$. We can see how $ sigma = 0.5$ pulls the distribution up and to the left, while $ sigma = 2$ squishes it down and to the right. In other words, a smaller sigma makes our distribution narrower while a larger sigma makes it wider. . Plotting the theoretical Rayleigh PDF above only shows what the distribution should looks like. Now we need to actually generate the Rayleigh values. . Generating Rayleigh samples . We will use the RandomState class in the numpy library to generate Rayleigh samples. RandomState is a helpful class that can sample from just about every known distribution. . from numpy.random import RandomState . First we create the RandomState class with the chosen seed of $0$. . seed = 0 rand = RandomState(seed) . This class can directly sample from a Rayleigh distribution. We use the sampling function RandomState.rayleigh which accepts two parameters: . scale: $ sigma$ with a default value of 1. | size: the shape of the output array | . Let&#39;s start by drawing 1,000 Rayleigh samples with $ sigma = 1$. . sigma = 1 shape = 1000 # one dimensional vector with 1000 samples . ray_vals = rand.rayleigh(scale=sigma, size=shape) . How to check if these samples are actually Rayleigh distributed? We can refer back to our PDF plots at the beginning, which tell us how Rayleigh samples should be &quot;spread out&quot;. The easiest way to check if these samples are spread out as expected is with a histogram. . # plot histogram of 1000 drawn samples plt.figure(figsize=(8,7)) plt.hist(ray_vals) plt.xlabel(&#39;Sample Value&#39;, fontsize=&#39;x-large&#39;) plt.ylabel(&#39;Counts&#39;, fontsize=&#39;x-large&#39;) plt.title(f&#39;Histogram of {shape:,} Rayleigh samples&#39;, fontsize=&#39;xx-large&#39;); . That looks pretty good! As we generate more samples it should get even closer to the earlier PDF plots. Let&#39;s make sure this happens by now drawing 10,000 samples and using more bins. . large_shape = 10000 many_ray_vals = rand.rayleigh(scale=sigma, size=large_shape) plt.figure(figsize=(8,7)) plt.hist(many_ray_vals, bins=20); plt.xlabel(&#39;Sample Value&#39;, fontsize=&#39;x-large&#39;) plt.ylabel(&#39;Counts&#39;, fontsize=&#39;x-large&#39;) plt.title(f&#39;Histogram of {large_shape:,} Rayleigh samples&#39;, fontsize=&#39;xx-large&#39;); . Looking better. Let&#39;s compare this histogram against the theoretical Rayleigh PDF. Note that we pass density=True to the histogram function below to make it an approximate PDF. . # compare theoretical vs. sampled Rayleigh PDFs plt.figure(figsize=(8,7)) plt.hist(many_ray_vals, density=True, bins=20) # makes the histogram sum to one, to mimic pdf plt.plot(points, ray_pdf, c=&#39;r&#39;, label=&#39;theoretical rayleigh pdf&#39;, linewidth=3) plt.title(&#39;Sampled vs. Theoretical Rayleigh PDFs&#39;, fontsize=&#39;x-large&#39;) plt.xlabel(&#39;Sample Value&#39;, fontsize=&#39;x-large&#39;) plt.ylabel(&#39;Probability Density&#39;, fontsize=&#39;x-large&#39;) plt.legend(); . Adding phase information . With the Rayleigh values from above we now have the magnitude, or length, of the complex weights. But that is only one part of a complex number. We are still missing the phase, or angle, information. The phase tells us which direction in the complex plane a vector is pointing in. . For our purposes it is enough to use random angles. Why? Many processes such as speech, images, and RF modulations encode information in phase. We do not want to bias the networks to any of these particular phase setups. By adding random uniform phase, it is like starting with many vectors pointing out in all directions. Then, during training, the network learns how to best orient and scale the weights for its task. . Adding this random uniform phase is straightforward. We pick uniform samples from $- pi$ to $ pi$ radians which maps to a full loop of the unit circle. This can be done with the same RandomState class from before. . # pick random directions along the unit circle phase = rand.uniform(low=-np.pi, high=np.pi, size=ray_vals.shape) . The phase can split the Rayleigh magnitudes into real and imaginary components. We use the cosine of the phase for the real part, and the sine of the phase for the imaginary part. . real = ray_vals * np.cos(phase) imag = ray_vals * np.sin(phase) . Let&#39;s plot some of these values in the complex plane to see if we truly have randomly oriented vectors. We pick 100 random weights and expect to see vectors with different magnitudes spread out in all directions. . # plot a few complex weights chosen_samples = range(100) # plot 100 random samples plt.figure(figsize=(8,7)) for idx in chosen_samples: # index into phase and magnitude variables angle,mag = phase[idx],ray_vals[idx] plt.polar([0,angle],[0,mag], marker=&#39;o&#39;) # plot them starting from the origin . Matching He and Glorot variance criteria . Even though we have real and imaginary components, they are not good initializations yet. The polar plot above gives some clues as to why (hint: look at the range of magnitudes in the vectors). Recall from the background on initializations: the key insight was that the variance of the weights should meet certain criteria. Matching this criteria helps the gradients flow well during backpropagation. . To get more specific, both the He and Glorot criteria are based on the incoming and outgoing connections in a network layer. The number of connections are typically called fan_in and fan_out, respectively. . The He criteria says that the variance of weights $W$ should be: $$ text{Var}(W) = frac{2}{ text{fan_in}}$$ . The Glorot criteria says that the variance should be: $$ text{Var}(W) = frac{2}{ text{fan_in + fan_out}}$$ . Deep networks typically have hundreds or thousands of connections. In practice this means that the variance of the weights has to be very small. Now we can see why the values in the earlier polar plot are not good: their variance is clearly too large. . How can we generate Rayleigh samples that meet the He or Glorot variance criteria? The complex nets paper from earlier includes a nice derivation for the variance of a complex Rayleigh distribution: $$ text{Var}(W) = 2 sigma^{2}$$ We can set the Rayleigh variance equal to the He and Glorot criteria and solve for sigma. . To meet the He criteria, sigma should be: $$ sigma_{ text{He}} = frac{1}{ sqrt{ text{fan_in}}}$$ . To meet the Glorot criteria, sigma should be: $$ sigma_{ text{Glorot}} = frac{1}{ sqrt{ text{fan_in + fan_out}}}$$ . Let&#39;s take a step back. In the earlier sections we used a flat vector of complex weights as an example. It&#39;s as if we took a single series of wind velocity or RF sample measurements. Since the He and Glorot criteria are defined specifically for network layers, we now switch to a simple one-layer network as an example. We aribtrarily choose a layer with 100 inputs and 50 outputs (fan_in = 100, fan_out = 50). . Plugging in these fan_in and fan_out numbers into the sigma equations gives: $$ sigma_{ text{He}} = frac{1}{10}$$ . $$ sigma_{ text{Glorot}} = frac{1}{5 sqrt{6}}$$ . By plugging in these sigmas into the random sampler, it will draw Rayleigh values that match the chosen variance criteria. We can then add phase information in the same way as before. . Putting it all together: complex pytorch initializer . Here is a short recap of the previous sections: . Drew a flat series of Rayleigh magnitudes. | Picked a random phase component, then split the magnitudes into real and imaginary parts. | Saw how to match the He and Glorot criteria with Rayleigh samples for a single network layer. | To make the above practical and usable, we need to automatically generate complex weigths that: . Match the He/Glorot variance criteria | Are pytorch tensors | Have the correct shape for the given network layer | . We can do this in a python function. . One quick word about calculating fan_in and fan_out values. We saw the feed-forward case with our single network layer. There the number of incoming connections was simply fan_in and the outgoing connections were fan_out. However, the convolutional case is slightly more complicated. A convolutional layer has input and output feature maps which are roughly analogous to input and output units in feed-forward layers. But we also have to factor in the kernel size. Pytorch has a nice convenience function to help. . We can now package all of the code above, with some refactoring, into a function that automatically generates complex Rayleigh weights given an input pytorch module. . import torch def get_complex_inits(module, seed=None, criterion=&#39;he&#39;): &quot;Creates real and imaginary Rayleigh weights for initialization.&quot; # create random number generator rand = RandomState(seed if seed is None else torch.initial_seed()) # get shape of the weights weight_size = module.weight.size() # find number of input and output connection fan_in,fan_out = torch.nn.init._calculate_fan_in_and_fan_out(module.weight) # find sigma to meet chosen variance criteria assert criterion in (&#39;he&#39;,&#39;glorot&#39;) factor = fan_in if criterion == &#39;he&#39; else fan_in + fan_out sigma = 1. / np.sqrt(factor) # draw rayleigh magnitude samples magnitude = rand.rayleigh(scale=sigma, size=weight_size) # draw uniform angle samples phase = rand.uniform(low=-np.pi, high=np.pi, size=magnitude.shape) # split magnitudes into real and imaginary components real = magnitude * np.cos(phase) imag = magnitude * np.sin(phase) # turn into float tensors and return real,imag = map(torch.from_numpy, [real,imag]) return real,imag . Testing on a nn.Linear module . We can test this on a single layer using pytorch&#39;s nn.Linear module. . m = torch.nn.Linear(100, 50) real,imag = get_complex_inits(m) . Let&#39;s check if the weights are correctly distributed. Going back to our Rayleigh introduction, it is the magnitude that should be Rayleigh distributed. . # grab magnitude as flat vector of numpy samples magnitude = torch.sqrt(real**2 + imag**2).numpy().reshape(-1) . # pick points that cover sample range to compare with theoretical rayleigh pdf points = np.linspace(0, magnitude.max(), 1000) ray_pdf = rayleigh_pdf(points, sigma=1./np.sqrt(100)) # plot histogram of magnitudes vs. theoretical pdf plt.figure(figsize=(8,7)) plt.title(&#39;nn.Linear vs. Theoretical Rayleigh PDFs&#39;, fontsize=&#39;x-large&#39;) plt.xlabel(&#39;Sample Value&#39;, fontsize=&#39;x-large&#39;) plt.ylabel(&#39;Probability Density&#39;, fontsize=&#39;x-large&#39;) plt.hist(magnitude, density=True) plt.plot(points, ray_pdf, c=&#39;r&#39;, linewidth=3); . Success! . Testing on a nn.Conv2d module . What about a convolutional layer? Our main concern here is that both the tensor shape and fan_in/fan_out are handled correctly. . # make conv layer with 100 input features, 50 output features, and (3x3) kernel m = torch.nn.Conv2d(100, 50, 3) real,imag = get_complex_inits(m) # get the initial complex weights # make sure the shape of weights is ok print(f&#39;Shapes of real and imaginary convolution tensors: {real.shape}, {imag.shape}&#39;) . Shapes of real and imaginary convolution tensors: torch.Size([50, 100, 3, 3]), torch.Size([50, 100, 3, 3]) . Let&#39;s check if they are still Rayleigh distributed in the same way as before. . # grab magnitude as flat vector of numpy samples magnitude = torch.sqrt(real**2 + imag**2).numpy().reshape(-1) . # pick points that cover sample range to compare with theoretical rayleigh pdf points = np.linspace(0, magnitude.max(), 1000) # we need fan_in for the more complicated conv case fan_in,fan_out = torch.nn.init._calculate_fan_in_and_fan_out(m.weight) ray_pdf = rayleigh_pdf(points, sigma=1./np.sqrt(fan_in)) # plot histogram of magnitudes vs. theoretical pdf plt.figure(figsize=(8,7)) plt.title(&#39;nn.Conv2d vs. Theoretical Rayleigh PDFs&#39;, fontsize=&#39;x-large&#39;) plt.xlabel(&#39;Sample Value&#39;, fontsize=&#39;x-large&#39;) plt.ylabel(&#39;Probability Density&#39;, fontsize=&#39;x-large&#39;) plt.hist(magnitude, density=True) plt.plot(points, ray_pdf, c=&#39;r&#39;, linewidth=3); . Conclusion . In this post we created Rayleigh initializations for complex-valued neural networks. We started with an overview of the Rayleigh distribution. We then used this distribution to generate the magnitudes of complex weights. Next we added some phase information to randomly orient the vectors. After that, we made sure the weights matched a certain variance criteria to be good initializations. Lastly we put all that work together into a python function that returns pytorch tensors. The function as is not quite ready for use in a fully fledged complex-valued setup, but we will get there. . Part two will look at another type of complex initialization based on (semi) unitary matrixes. After that we will proceed to build complex convolutions and actvations. .",
            "url": "https://enzokro.dev/complex_networks/2020/07/20/Rayliegh-initialization-for-complex-networks.html",
            "relUrl": "/complex_networks/2020/07/20/Rayliegh-initialization-for-complex-networks.html",
            "date": " • Jul 20, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About",
          "content": "Researcher from Ecuador, working on RF applications with ML, speech, and video processing. .",
          "url": "https://enzokro.dev/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://enzokro.dev/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}